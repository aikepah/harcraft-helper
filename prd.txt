Development Deliverables: Heliana's Harvesting Helper
This document breaks down the development of the "Heliana's Harvesting Helper" application into a series of logical, sequential deliverables. Each deliverable represents a milestone that can be assigned to a coding agent.

Deliverable 1: Project Foundation & Database Seeding
Goal: To establish the application's backend structure, database, and populate it with all the necessary data from the source material. This is a non-UI deliverable focused on creating the data backbone for all subsequent features.

Features Included:

All tables and fields as defined in Section 9 of the PRD.

Key Tasks:

Set up the initial project structure and database.

Create the schema for all 13 tables: PartyInventory_MonsterComponents, PartyInventory_MundaneIngredients, Components, MundaneIngredients, MagicItemRecipes, MonsterForgedRecipes, OozeRandomComponentTable, MonsterTypes, CreatureSizes, MundaneItems, CookingRecipes, EdibleComponentEffects, and Quirks.

Write scripts to parse and insert all data from the lcc.pdf PDF into the appropriate tables. This includes all components, recipes, mundane items, rules, etc.

Implement relationships between tables (e.g., Foreign Keys).

Acceptance Criteria:

The database is fully populated with accurate data.

The data schema correctly reflects all fields and data types specified in the PRD.

The application can successfully connect to and query the database.

Deliverable 2: The Harvesting Helper
Goal: To build the first core interactive feature of the app, allowing users to complete the entire monster harvesting workflow.

Features Included:

Section 6.1: Harvesting Helper

Key Tasks:

Develop the UI for Step 1: Monster Selection, including dropdowns for Type, CR, and Size.

Implement the logic to dynamically display harvest skill, time, and essence based on Step 1 selections.

Develop the UI for Step 2: Build Harvest List, including the special cases for "Ooze Harvest" and "Custom Harvest".

Develop the UI for Step 3: Perform the Harvest Check with inputs for Assessor, Carver, and Helpers.

Implement the logic to calculate the final Harvesting Check Total.

Develop the UI for Step 4: View Results, showing successes/failures and warnings for volatile components.

Implement the functionality for the "Add to Inventory" button, which writes the harvested components to the PartyInventory_MonsterComponents table.

Acceptance Criteria:

A user can complete a standard, ooze, or custom harvest from start to finish.

Calculations for Harvest DC and the final check are accurate.

Successfully harvested items are correctly added to the party's inventory in the database.

Deliverable 3: Inventory Management
Goal: To build the UI that allows users to view and manage all their collected crafting materials.

Features Included:

Section 6.2: Inventory Management

Key Tasks:

Create the two-tab UI: "Monster Components" and "Mundane Ingredients".

Implement the logic to read from the PartyInventory tables and display the components and ingredients.

Develop UI controls for each inventory item to allow users to manually add, edit quantities, modify metatags, and delete entries.

Ensure changes made in the UI are correctly saved back to the database.

Acceptance Criteria:

The inventory accurately reflects the data in the database.

Users can successfully view and manage both monster components and mundane ingredients.

Items added via the Harvesting Helper (Deliverable 2) appear correctly in the inventory.

Deliverable 4: Craftable Recipe Browser
Goal: To create a browsable and filterable view of all crafting recipes, and to connect it to the inventory system to show what is currently craftable.

Features Included:

Section 6.3: Craftable Recipes

Key Tasks:

Develop the UI to display the list of all magic item recipes from the database.

Implement the core "Can Craft" logic that cross-references the PartyInventory tables with the MagicItemRecipes requirements.

Build the UI for all filtering controls: "Can Craft" toggle, "Enforce Metatags" checkbox, and multi-select filters for Item Type, Creature Type, and Rarity.

Implement the text search functionality.

Acceptance Criteria:

All recipes from the database are displayed correctly.

The "Can Craft" indicator is accurate based on the party's inventory.

All filters and the search function work as expected.

Deliverable 5: The Crafting Helper
Goal: To build the complex, multi-step interface for guiding users through the four different methods of crafting items.

Features Included:

Section 6.4: Crafting Helper

Key Tasks:

Create the main UI that allows users to select one of the four modes: Manufacturing, Enchanting, Forging, or Monster-Forged.

Develop the Crafter Management interface for adding workers, inputting their rolls/stats, and calculating total time and labor costs.

Implement the specific UI and logic for each of the four crafting flows, ensuring the correct DCs, skills, and components are displayed.

Implement the logic to calculate the outcome of crafting checks and determine the number of flaws or boons.

Create a UI element that allows users to roll on the appropriate quirk table and view the results.

Ensure that completing a craft correctly consumes the required components from the inventory.

Acceptance Criteria:

A user can successfully complete a crafting project using any of the four modes.

Time and cost calculations for multiple crafters are accurate.

Quirk generation is handled correctly.

Inventory is correctly updated after an item is crafted.

Deliverable 6: Cooking Helper & Reference Section
Goal: To implement the final interactive feature for cooking magical meals and the simple reference pages.

Features Included:

Section 6.5: Cooking Helper

Section 6.6: Reference

Key Tasks:

Develop the UI for the Cooking Helper, allowing users to select a recipe and populate it with ingredients from their inventory.

Implement the logic to display a preview of the meal's effects based on the chosen components.

Implement the check resolution and quirk generation for cooking.

Ensure the "Omit Magical Component" feature works correctly.

Create the static UI pages for the Reference section, displaying the rules for Salvaging and Socketing.

Acceptance Criteria:

A user can successfully complete the cooking workflow from recipe selection to outcome.

The effects preview is accurate.

The Reference section correctly displays the specified rules.